<?xml version="1.0"?>
<!--
 Copyright (c) 2014, Intel Corporation
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without 
 modification, are permitted provided that the following conditions are met:

 - Redistributions of source code must retain the above copyright notice, 
   this list of conditions and the following disclaimer.
 - Redistributions in binary form must reproduce the above copyright notice, 
   this list of conditions and the following disclaimer in the documentation 
   and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
 THE POSSIBILITY OF SUCH DAMAGE.
-->

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>

<prefwindow id="river-trail-extension-prefs"
     title="River Trail Extension Options"
     xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
 
<prefpane id="river-trail-extension-prefs-platform" label="OpenCL Platform Settings">
  <preferences>
    <preference id="pref-defaultPlatform" name="extensions.river-trail-extension.defaultPlatform" type="int"/>
  </preferences>
 
  <groupbox>
    <caption label="Default OpenCL Platform" />
    <label control="ctl-defaultPlatform" value="Select the OpenCL platform you want to use by default from the list below..." />
    <listbox id="defaultPlatform" >
        <listhead>
            <listheader label="Name" />
            <listheader label="Version" />
            <listheader label="Vendor" />
        </listhead>
        <listcols>
            <listcol flex="1" />
            <listcol flex="1" />
            <listcol flex="1" />
        </listcols>
    </listbox>
  </groupbox>
  <groupbox>
    <caption label="Select an OpenCL Device" />
    <menulist id="defaultDeviceType" >
      <menupopup id="deviceMenuPopup">
      </menupopup>
    </menulist>
  </groupbox>
</prefpane>
 
<script type="text/javascript">
    <![CDATA[
    Components.utils.import("resource://gre/modules/devtools/Console.jsm");
    Components.utils.import("resource://gre/modules/Services.jsm");

    // Populates the list of platforms.
    function addPlatform(context, menu, platform, isHighlighted) {

        console.log("addPlatform: platform: " + platform);

        var row = document.createElement("listitem");
        var item;
        
        item = document.createElement("listcell"); 
        item.setAttribute("label", platform.name);
        row.appendChild(item);
        item = document.createElement("listcell"); 
        item.setAttribute("label", platform.version);
        row.appendChild(item);
        item = document.createElement("listcell"); 
        item.setAttribute("label", platform.vendor);
        row.appendChild(item);
        row.setAttribute("selected", isHighlighted);
        menu.appendChild(row);
    }

    // Populates the drop-down list of devices.  This happens
    // individually, per platform.
    function addDevices(platform) {
        var deviceMenu = document.getElementById("defaultDeviceType");
        var deviceMenuPopup = document.getElementById("deviceMenuPopup");
        // Remove popup to clear everything
        for(var i = 0; i < deviceMenu.childNodes.length; i++) {
            deviceMenu.removeChild(deviceMenu.childNodes[i]);
        }
        deviceMenu.selectedIndex = 0;

        var deviceString = platform.deviceNames.trim();

        var devices = deviceString.split("#");
        for(var i = 0; i < devices.length; i++) {
            if(devices[i] === "Unknown Device" || devices[i] === "")
                continue;
            deviceMenu.appendItem(devices[i].trim(), i);
        }
    }

    var prefService = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefService);  
    var prefBranch = prefService.getBranch("extensions.river-trail-extension.");
    console.log(prefBranch);
    var defaultPlatform = prefBranch.getIntPref("defaultPlatform");
    var defaultDevice = prefBranch.getIntPref("defaultDeviceType");
    if(defaultPlatform < 0 || defaultPlatform === undefined) {
        defaultPlatform = 0;
    }
    if(defaultDevice < 0 || defaultDevice === undefined) {
        defaultDevice = 0;
    }
    var mPlatform = document.getElementById("defaultPlatform");

    let context = {};
    Services.scriptloader.loadSubScript("chrome://river-trail-extension/content/ffi.js",
                                        context);
    context.Platforms.init();
    let allPlatforms = context.Platforms.jsPlatforms;
    let numPlatforms = context.Platforms.numPlatforms.value;
    console.log("numPlatforms: " + numPlatforms);
    for (let i = 0; i < numPlatforms; i++) {
        addPlatform(context,
                    mPlatform,
                    context.Platforms.jsPlatforms[i],
                    (i === defaultPlatform) ? "true" : "false");
    }
    addDevices(allPlatforms[defaultPlatform]);
    mPlatform.onselect = function writePlatform() {
        if(mPlatform.selectedIndex !== defaultPlatform) {
            mPlatform.getItemAtIndex(defaultPlatform).setAttribute("selected", "false");
        }
        if(mPlatform.selectedIndex > 0 && mPlatform.selectedIndex < allPlatforms.length) {
            prefBranch.setIntPref("defaultPlatform", mPlatform.selectedIndex);
            // Query and populate device list
            addDevices(allPlatforms[mPlatform.selectedIndex]);
        }
    }
    var mDevice = document.getElementById("defaultDeviceType");
    mDevice.selectedIndex = defaultDevice;
    mDevice.onselect = function writeDevice() {
        if (mDevice.selectedItem != null) {
            prefBranch.setIntPref("defaultDeviceType", mDevice.selectedItem.value);
        }
    }
    ]]>
</script>
</prefwindow>
